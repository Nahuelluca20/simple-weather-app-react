{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","search","setsearch","city","country","humidity","temperature","minTemp","weatherIcons","allData","setAllData","useEffect","fetchData","a","process","axios","get","res","data","name","sys","main","temp","temp_min","weather","icon","onSubmit","event","console","log","preventDefault","type","placeholder","value","onChange","target","for","className","src","height","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAuGeA,MAnGf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEiBF,mBAAS,CAC7BG,KAAM,GACNC,QAAS,GACTC,SAAU,GACVC,YAAa,GACbC,QAAS,GACTC,aAAc,KARX,mBAENC,EAFM,KAEGC,EAFH,KAWXC,qBAAU,WACRC,MACA,IAEF,IAAMA,EAAS,uCAAG,WAAMT,GAAN,eAAAU,EAAA,sEAEGC,yCAFH,SAGMC,IAAMC,IAAN,4DAA+Db,EAA/D,kBADHW,yCACG,YAHN,cAGNG,EAHM,gBAINP,EAAW,CACfP,KAAMc,EAAIC,KAAKC,KACff,QAASa,EAAIC,KAAKE,IAAIhB,QACtBC,SAAUY,EAAIC,KAAKG,KAAKhB,SACxBC,YAAaW,EAAIC,KAAKG,KAAKC,KAC3Bf,QAASU,EAAIC,KAAKG,KAAKE,SACvBf,aAAcS,EAAIC,KAAKM,QAAQ,GAAGC,OAVxB,gHAAH,sDA2BjB,OACE,+BACE,gCACE,uBAAMC,SAbS,SAACC,GACpBC,QAAQC,IAAI5B,GACZW,EAAUX,GACV0B,EAAMG,kBAUF,UACE,uBACEC,KAAK,OACLZ,KAAK,OACLa,YAAY,YACZC,MAAOhC,EACPiC,SAbW,SAAAP,GACnBzB,EAAUyB,EAAMQ,OAAOF,UAcjB,wBAAQG,IAAI,OAAZ,uBAGF,kCACE,qBAAKC,UAAU,aAAf,SACE,8BACE,sBAAKA,UAAU,OAAf,UACE,qBAAKC,IAAK,qCAAuC7B,EAAQD,aAAe,UAAW+B,OAAO,QAAQC,MAAM,UACxG,oBAAIH,UAAU,QAAd,SACG5B,EAAQN,OAEX,oBAAIkC,UAAU,WAAd,SACG5B,EAAQL,UAGX,sBAAKiC,UAAU,sBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,0CACA,8BACC5B,EAAQJ,SADT,UAKF,gCACE,6CACA,8BACGI,EAAQH,YADX,cAKF,sBAAK+B,UAAU,aAAf,UACE,iDACA,8BACG5B,EAAQF,QADX,gCC7ELkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3745d97b.chunk.js","sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react'\nimport axios from 'axios';\n\nfunction App() {\n  const [search, setsearch] = useState('')\n  const [allData, setAllData] = useState({\n            city: '',\n            country: '',\n            humidity: '',\n            temperature: '',\n            minTemp: '',\n            weatherIcons: ''\n  })\n\n    useEffect(() => {\n      fetchData()\n    },[])\n\n    const fetchData = async(city) => {\n        try {\n          const apiKey = process.env.REACT_APP_WEATHER_API_KEY\n          const res = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}=metric`)\n          await setAllData({\n            city: res.data.name,\n            country: res.data.sys.country,\n            humidity: res.data.main.humidity,\n            temperature: res.data.main.temp,\n            minTemp: res.data.main.temp_min,\n            weatherIcons: res.data.weather[0].icon\n          })\n        }\n        catch {}\n    }\n  \n\n  const handleSubmit = (event) => {\n    console.log(search)\n    fetchData(search)\n    event.preventDefault()\n  };\n\n  const handleChange = event => {\n    setsearch(event.target.value);\n  };\n\n  return (\n    <main>\n      <div>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\" \n            name=\"city\" \n            placeholder=\"City Name\"\n            value={search}\n            onChange={handleChange}\n            />\n          <button for=\"city\">Search</button>\n        </form>\n\n        <section>\n          <div className=\"header-div\">\n            <div>\n              <div className=\"data\">\n                <img src={'https://openweathermap.org/img/wn/' + allData.weatherIcons + '@2x.png'} height=\"100px\" width=\"100px\"/>\n                <h1 className=\"title\">\n                  {allData.city}\n                </h1>\n                <h2 className=\"location\">\n                  {allData.country}\n                </h2>\n\n                <div className=\"weather-description\">\n                  <div className=\"first-child\">\n                    <h3>HUMIDITY</h3>\n                    <p>\n                    {allData.humidity}%\n                    </p>\n                  </div>\n\n                  <div>\n                    <h3>TEMPERATURE</h3>\n                    <p>\n                      {allData.temperature}°C\n                    </p>\n                  </div>\n\n                  <div className=\"last-child\">\n                    <h3>MIN TEMPERATURE</h3>\n                    <p>\n                      {allData.minTemp}°C\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}